// src/services/authService.ts
import api from './api';

export interface SignupData {
  username: string;
  email: string;
  password: string;
  password2: string;
  first_name: string;
  last_name: string;
  phone_number: string;
}

export interface LoginData {
  username: string;
  password: string;
}

export interface UserProfile {
  id: number;
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  phone_number: string;
  // Th√™m c√°c fields kh√°c t·ª´ API tr·∫£ v·ªÅ
}

export interface AuthResponse {
  access: string;
  refresh: string;
  user?: UserProfile;
}

export interface ApiResponse<T = any> {
  success: boolean;
  message?: string;
  data?: T;
  error?: string;
}

export interface ChangePasswordData{
    old_password: string;
    new_password: string;
    confirm_new_password: string;
}
export const authService = {
  // ƒêƒÉng k√Ω t√†i kho·∫£n
  async signup(data: SignupData): Promise<ApiResponse> {
    try {
      const response = await api.post('/auth/register/', data);
      
      return {
        success: true,
        message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
        data: response.data
      };
    } catch (error: any) {
      console.error('Signup API error:', error);
      
      // X·ª≠ l√Ω l·ªói t·ª´ Django
      let errorMessage = 'ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω';
      
      if (error.response?.data) {
        const errorData = error.response.data;
        
        // X·ª≠ l√Ω c√°c l·ªói validation t·ª´ Django
        if (errorData.email) {
          errorMessage = errorData.email[0];
        } else if (errorData.username) {
          errorMessage = errorData.username[0];
        } else if (errorData.password) {
          errorMessage = errorData.password[0];
        } else if (errorData.non_field_errors) {
          errorMessage = errorData.non_field_errors[0];
        } else if (typeof errorData === 'string') {
          errorMessage = errorData;
        } else if (errorData.detail) {
          errorMessage = errorData.detail;
        }
      }
      
      throw new Error(errorMessage);
    }
  },

  //change pass
  async changePassword(data: ChangePasswordData): Promise<ApiResponse> {
    try{
        console.log('Sending change password request');
        const response = await api.post('/auth/change-password/', data,{

        });
        return {
            success: true,
            message: 'Password changed successfully',
            data: response.data
        };
    }
    catch (error: any){
        console.error('Change password API error:', error);
        let errorMessage = 'An error occurred while changing the password';
         if (error.response?.data) {
        const errorData = error.response.data;
        
        if (errorData.old_password) {
          errorMessage = errorData.old_password[0];
        } else if (errorData.new_password) {
          errorMessage = errorData.new_password[0];
        } else if (errorData.non_field_errors) {
          errorMessage = errorData.non_field_errors[0];
        } else if (errorData.detail) {
          errorMessage = errorData.detail;
        }
      }
      throw new Error(errorMessage);
      
    }
  },

  // Qu√™n m·∫≠t kh·∫©u - G·ª≠i email reset
  async forgotPassword(email: string): Promise<ApiResponse> {
    try {
      const response = await api.post('/auth/forgot-password/', { email });
      
      return {
        success: true,
        message: 'ƒê√£ g·ª≠i h∆∞·ªõng d·∫´n reset m·∫≠t kh·∫©u ƒë·∫øn email c·ªßa b·∫°n',
        data: response.data
      };
    } catch (error: any) {
      console.error('Forgot password API error:', error);
      throw new Error('Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu reset m·∫≠t kh·∫©u');
    }
  }, 
    async resetPassword(token: string, newPassword: string): Promise<ApiResponse> {
        try {
        const response = await api.post('/auth/reset-password/', {
            token,
            new_password: newPassword
        });
        
        return {
            success: true,
            message: 'Reset m·∫≠t kh·∫©u th√†nh c√¥ng',
            data: response.data
        };
        } catch (error: any) {
        console.error('Reset password API error:', error);
        throw new Error('Kh√¥ng th·ªÉ reset m·∫≠t kh·∫©u');
        }
    },

    async sendForgotPasswordOTP(email: string): Promise<ApiResponse> {
    try {
      console.log('üìß Sending forgot password OTP:', email);
      const response = await api.post('/auth/forgot-password/', { email });
      
      return {
        success: true,
        message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
        data: response.data
      };
    } catch (error: any) {
      console.error('‚ùå Send OTP error:', error);
      
      if (error.data?.email) {
        throw new Error(error.data.email[0]);
      }
      
      throw new Error(error.message);
    }
  },

  // X√°c th·ª±c OTP qu√™n m·∫≠t kh·∫©u
async verifyForgotPasswordOTP(email: string, otp: string): Promise<ApiResponse> {
  try {
    console.log('üîê [DEBUG] Verifying OTP with email:', { email, otp });
    
    // QUAN TR·ªåNG: G·ª≠i c·∫£ email v√† OTP
    const requestData = {
      email: email,  // ƒê·∫¢M B·∫¢O C√ì EMAIL
      otp_code: otp
    };

    console.log('üì§ [DEBUG] Request payload:', requestData);
    
    const response = await api.post('/auth/verify-otp/', requestData);
    
    console.log('‚úÖ [DEBUG] OTP Verified Success:', response.data);
    
    return {
      success: true,
      message: 'X√°c th·ª±c OTP th√†nh c√¥ng',
      data: response.data
    };
  } catch (error: any) {
    console.error('‚ùå [DEBUG] OTP Verification Failed:', error);
    
    // X·ª≠ l√Ω l·ªói
    if (error.response?.data?.otp) {
      throw new Error(error.response.data.otp[0]);
    } else if (error.response?.data?.email) {
      throw new Error(error.response.data.email[0]);
    } else if (error.response?.data?.detail) {
      throw new Error(error.response.data.detail);
    }
    
    throw new Error(error.message || 'X√°c th·ª±c OTP th·∫•t b·∫°i');
  }
},

  // Reset m·∫≠t kh·∫©u sau khi x√°c th·ª±c OTP
  async resetPasswordWithOTP(email: string, otp: string, newPassword: string): Promise<ApiResponse> {
    try {
      console.log('üîÑ Resetting password with OTP');
      const response = await api.post('/auth/reset-password/', {
        email,
        otp,
        new_password: newPassword,
        confirm_new_password: newPassword
      });
      
      return {
        success: true,
        message: 'Reset m·∫≠t kh·∫©u th√†nh c√¥ng!',
        data: response.data
      };
    } catch (error: any) {
      console.error('‚ùå Reset password with OTP error:', error);
      
      if (error.data?.otp) {
        throw new Error(error.data.otp[0]);
      } else if (error.data?.new_password) {
        throw new Error(error.data.new_password[0]);
      }
      
      throw new Error(error.message);
    }
  },

  // ƒêƒÉng nh·∫≠p
  async login(username: string, password: string): Promise<AuthResponse> {
    try {
      const loginData: LoginData = {
        username,
        password
      };

      const response = await api.post('/auth/login/', loginData);
      
      console.log('Login API response:', response.data);
      
      // L∆∞u token v√†o AsyncStorage
      if (response.data.access) {
        // await AsyncStorage.setItem('accessToken', response.data.access);
        // await AsyncStorage.setItem('refreshToken', response.data.refresh);
        
        // L∆∞u th√¥ng tin user n·∫øu c√≥
        if (response.data.user) {
          // await AsyncStorage.setItem('userData', JSON.stringify(response.data.user));
        }
      }
      
      return response.data;
    } catch (error: any) {
      console.error('Login API error:', error);
      
      let errorMessage = 'ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p';
      
      if (error.response?.data) {
        const errorData = error.response.data;
        
        if (errorData.detail) {
          errorMessage = errorData.detail;
        } else if (errorData.non_field_errors) {
          errorMessage = errorData.non_field_errors[0];
        } else if (typeof errorData === 'string') {
          errorMessage = errorData;
        }
      }
      
      throw new Error(errorMessage);
    }
  },

  // L·∫•y th√¥ng tin profile
  async getProfile(): Promise<UserProfile> {
    try {
      // L·∫•y token t·ª´ storage
      // const token = await AsyncStorage.getItem('accessToken');
      
      const response = await api.get('/auth/profile/', {
        // headers: {
        //   Authorization: `Bearer ${token}`
        // }
      });
      
      return response.data;
    } catch (error: any) {
      console.error('Get profile API error:', error);
      throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }
  },

  // X√°c th·ª±c OTP (n·∫øu c√≥)
  async verifyCode(data: { email: string; code: string }) {
    // T·∫°m th·ªùi mock v√¨ API c·ªßa b·∫°n ch∆∞a c√≥ OTP
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({ 
          success: true, 
          message: 'X√°c th·ª±c th√†nh c√¥ng'
        });
      }, 1000);
    });
  },

  // G·ª≠i l·∫°i OTP (n·∫øu c√≥)
  async resendCode(email: string) {
    // T·∫°m th·ªùi mock
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({ 
          success: true, 
          message: 'ƒê√£ g·ª≠i l·∫°i m√£ x√°c th·ª±c' 
        });
      }, 1000);
    });
  },

  // L∆∞u th√¥ng tin c√° nh√¢n
  async savePersonalData(data: any) {
    // T·∫°m th·ªùi mock - b·∫°n c√≥ th·ªÉ t√≠ch h·ª£p v·ªõi API update profile
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({ 
          success: true, 
          message: 'L∆∞u th√¥ng tin th√†nh c√¥ng',
          user: data 
        });
      }, 1500);
    });
  },

  // Refresh token
  async refreshToken(refreshToken: string) {
    try {
      const response = await api.post('/auth/token/refresh/', {
        refresh: refreshToken
      });
      
      return response.data;
    } catch (error: any) {
      throw new Error('Kh√¥ng th·ªÉ refresh token');
    }
  },

  // ƒêƒÉng xu·∫•t
  async logout() {
    try {
      // const token = await AsyncStorage.getItem('accessToken');
      
      await api.post('/auth/logout/', {}, {
        // headers: {
        //   Authorization: `Bearer ${token}`
        // }
      });
      
      // X√≥a token kh·ªèi storage
      // await AsyncStorage.removeItem('accessToken');
      // await AsyncStorage.removeItem('refreshToken');
      // await AsyncStorage.removeItem('userData');
      
      return { success: true, message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' };
    } catch (error: any) {
      console.error('Logout error:', error);
      // V·∫´n x√≥a token ngay c·∫£ khi API fail
      // await AsyncStorage.removeItem('accessToken');
      // await AsyncStorage.removeItem('refreshToken');
      // await AsyncStorage.removeItem('userData');
      
      return { success: true, message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' };
    }
  }
};